Pre-conditions
- Hardware, peripherals, and operating system needed to run your code.
    -Database
        For Mac OS:
            Homebrew
            When installing ArangoDB via the macOS package manager Homebrew, only the Community Edition is available.

            The Homebrew installation is updated a few days after the official release of a new version.

            If you are using homebrew, then you can install the latest released stable version of ArangoDB using brew as follows:

            brew install arangodb
            This will install the current stable version of ArangoDB and all dependencies within your Homebrew tree. Note that the server will be installed as:

            /usr/local/Cellar/arangodb/<VERSION>/sbin/arangod
            <VERSION> is a placeholder for the actual version number, e.g. 3.5.0.

            You can start the server by running the command:

            /usr/local/Cellar/arangodb/<VERSION>/sbin/arangod &
            Configuration file is located at:

            /usr/local/etc/arangodb3/arangod.conf
            The ArangoDB shell will be installed as:

            /usr/local/Cellar/arangodb/<VERSION>/bin/arangosh
            You can uninstall ArangoDB using:

            brew uninstall arangodb
            However, in case you started ArangoDB using the launchctl, you need to unload it before uninstalling the server:

            launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.arangodb.plist
            Then remove the LaunchAgent:

            rm ~/Library/LaunchAgents/homebrew.mxcl.arangodb.plist
            If the latest ArangoDB version is not shown in Homebrew, you also need to update Homebrew executing the command brew update.

        Windows:
            Installation:
               please follow the instructions on the website:
                    English Version: https://www.arangodb.com/docs/stable/getting-started-installation.html
                    Chinese Version: https://blog.csdn.net/rensihui/article/details/77993786
            Running Arangodb Service:
                1. Go into the directory where you install your arangodb and go inside into .../usr/bin (eg.F:\arangoDB\ArangoDB3-3.6.2_win64\usr\bin)
                2. Run cmd in administer in this 'bin' directory. Run the command "arangod --install-service". Then you have your arangodb service running.
                3. Then click the 'arango.exe' in your bin directory, if "have fun" is shown, then it means your service is running successfully.
                4. Click on 'arangosh.exe' in bin directory, which will ask you to enter password. You could directly press you 'Enter' and it will connect to your database.
                5. You can check your connection in this shell or you can log into '127.0.0.1' to check availability.



Supporting files
- A list of non-standard libraries needed for your project to run, including:
    - Dependency for arangodb, stanfordNLP, log4j,.etc in Maven project structure concluded in pom.xml. (Users need to click on "import changes" for these dependencies in IDE)
    - Java swing, awt and etc. libraries for UI display
- Examples of how to use your project
    - Database Setup:
        - Make sure the arangoDB is successfully installed on your system and arangodb database service is successfully set up on your system.
        - Use "127.0.0.1:8529" to make HTTPs request in your own browser. The operation can be simply accessing the 127.0.0.1:8529 by your local browser.
        - After accessing this IP:port, a login site will occur in your browser.
        - Use login name as "root" and password as "" to login.
        - After logged in, add three new graphs named "english", "german", "french" in graph page, with edge definition as "freqs", from collection as "words" and to collection as "words".
    - Currently GUI window is used and is successfully combined with our core algorithm and structure
    - Users now could simply run the "test.java" in "group3/src/main/java/ec504Group3/test.java" directory to view the whole crawler-database-checker processes.
    - As you can see in our GUI part, there are several language choices you can choose to correct a specific language.
    - After choosing a specific language, you need to enter in legal input into two text fields below which are "crawler URL List file" and "checker file".
    - Currently legal input is "src/main/java/ec504Group3/Resource/URL-list" and "external/taggers/input/english-input.txt"
    - After typing in the legal file path, you could click the button "enter" or you could press button "reset" to re-type the file path. (Database setup is required)
    - After some time of running, the result will be shown on the text Area on GUI
- Descriptions of testing patterns, and instructions on how to exercise them:
    - test:
        - Different URLs are chosen for different language URL list building as the original URL. Then we crawler several URLs from this URL and store them into URL-list file. Then for each line (URL) in this file, we crawler the data and dump them into local files. In the test, we successfully store 15 files locally.
        - Transferring each file into token type and get the pos tag of each word in the file by using StanfordNLP.api.
        - Information is successfully stored into graph database.
        - One checkfile is created in CheckFile directory and its content is also transferred to token type.
        - Token type pairs in check file are checked in order based on our algorithm for searching frequency in the graph database.
        - The error rate in our dictionary is about 0.002% in 15 files.
        - We deliberately make some mistakes in checkfile. And the test result shows out our algorithm works well since some sentences with mistakes do has some reasonable suspicion scores.
        - Some example results:
            - English
                - {With DrupalCon being postponed or potentially canceled there will be a significant financial impact on our beloved nonprofit } score: 10
                - {Because we all have different needs Drupal allows you to create a unique space in a world of cookiecutter solutions } score: 10
                - {We 're the leading opensource CMS for ambitious digital experiences that reach your audience across multiple channels } score: 0
                - {She is responsible for organizing and motivating a worldwide collective dedicated to Internet openness } score: 20
             - French (Language that all the team members don't know)
                - {Cette approche dite ZT phylogénétique '' permet en comparant le génome du SARSCoV2 avec celui d'autres virus connus d'identifier ses ancêtres et d'émettre des hypothèses sur sa trajectoire } score: 50
                - {Pour acquérir cette certitude les scientifiques ont étudié son histoire dont une grande partie est inscrite dans ses gènes } score: 10
                - {S'il est bien possible de créer de toutes pièces des virus tous les indices convergent ici vers une origine naturelle de ce nouvel agent infectieux } score: 20
        - As you can see, our suspicion score is reasonable

Execution
- Import the corresponding dependencies in IDE correctly.
- Make sure the arangoDB is successfully installed on your system and arangodb database service is successfully set up on your system.
- You can start the server by running the command:  /usr/local/Cellar/arangodb/<VERSION>/sbin/arangod &
- Use "127.0.0.1:8529" to make HTTPs request in your own browser. The operation can be simply accessing the 127.0.0.1:8529 by your local browser.
- After accessing this IP:port, a login site will occur in your browser.
- Use login name as "root" and password as "" to login.
- After logged in, add three new graphs named "english", "german", "french" in graph page, with edge definition as "freqs", from collection as "words" and to collection as "words".
- Then simply run the "test.java" in "group3/src/main/java/ec504Group3/" directory to get the GUI running
- The crawler original URL could be changed in input
- The checker original path could be changed in input
- The checker file can be put into "src/main/java/ec504Group3/Resource/CheckerFile/" or "external/taggers/input/" directory and be claimed and checked in GUI.java
        You can use the files in following directory in the project, make sure you input the absolute paths of them:
       - English Language:
         - src/main/java/ec504Group3/Resource/EnglishURL_List
         - src/main/java/ec504Group3/Resource/CheckFile/check-0.txt
       - German Language: (Language we don't know)
         - src/main/java/ec504Group3/Resource/GermanURL_List
         - src/main/java/ec504Group3/Resource/CheckFile/check-1.txt
       - French Language: (Language we don't know)
         - src/main/java/ec504Group3/Resource/FrenchURL_List
         - src/main/java/ec504Group3/Resource/CheckFile/check-2.txt
- Please wait for 3 minutes to get the result.